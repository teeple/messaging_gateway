<?php

/**
 * @file:
 * Privatemsg Views UI sub-module.
 */

/**
 * Implementation of hook_menu().
 */
function privatemsg_views_ui_menu() {
  $items['admin/settings/messages/privatemsg_views_ui'] = array(
    'type'             => MENU_LOCAL_TASK,
    'title'            => 'Views UI',
    'description'      => 'Configure Privatemsg Views UI settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('privatemsg_views_ui_settings_form'),
    'access arguments' => array('administer privatemsg settings'),
    'file'             => 'privatemsg_views_ui.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function privatemsg_views_ui_menu_alter(&$items) {
  // Own mailbox
  $items['messages'] = array(
    'title'            => 'Messages',
    'title callback'   => '_privatemsg_views_ui_mailbox_title',
    'title arguments'  => array(),
    'page callback'    => 'privatemsg_views_ui_mailbox',
    'page arguments'   => array(),
    'file'             => 'privatemsg_views_ui.pages.inc',
    'file path'        => drupal_get_path('module', 'privatemsg_views_ui'),
    'access callback'  => 'privatemsg_user_access',
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['messages/list'] = array(
    'title'            => 'Messages',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -10,
  );
  // Selected user's mailbox
  $items['user/%/messages'] = array(
    'title' => 'Messages',
    'page callback'    => 'privatemsg_views_ui_mailbox',
    'page arguments'   => array(1),
    'file'             => 'privatemsg_views_ui.pages.inc',
    'file path'        => drupal_get_path('module', 'privatemsg_views_ui'),
    'access callback'  => 'privatemsg_user_access',
    'access arguments' => array('read all private messages'),
    'type' => MENU_LOCAL_TASK,
  );
  // PM Thread
  $items['messages/view/%privatemsg_thread'] = array(
    'title'            => 'Read message',
    // Set the third argument to TRUE so that we can show access denied instead
    // of not found.
    'load arguments'   => array(NULL, NULL, TRUE),
    'page callback'    => 'privatemsg_views_ui_thread',
    'page arguments'   => array(2),
    'file'             => 'privatemsg_views_ui.pages.inc',
    'file path'        => drupal_get_path('module', 'privatemsg_views_ui'), 
    'access callback'  => 'privatemsg_view_access',
    'access arguments' => array(2),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => -5,
  );
}

/**
 * Implementation of hook_form_formid_alter().
 */
function privatemsg_views_ui_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_bulk_operations_form__1' &&
      $form['#plugin']->view->name == variable_get('privatemsg_views_ui_mailbox_view', 'privatemsg_mailbox')) {
    $step = $form['step']['#value'];
    switch ($step) {
      case VIEWS_BULK_OPS_STEP_VIEW:
        $form['select']['#title'] = t('Actions');
      case VIEWS_BULK_OPS_STEP_SINGLE:
        $form['objects']['#weight'] = -10;
        uasort($form, 'element_sort');
    }
  }
}

function privatemsg_views_ui_views_pre_execute(&$view) {
    if ($view->name == variable_get('privatemsg_views_ui_mailbox_view', 'privatemsg_mailbox')) {
      // Views tries to optimize the query before counting. Probably because 
      // we are doing dirty stuff with the base field (mid) it totally breaks.
      // See http://drupal.org/node/904284.
      
      // Optimize the query ourselves (best effort) and feed it to Views.      
      // Counting doesn't need 'order by' clause.
      $query = preg_replace('/ORDER BY.*$/', '', $view->build_info['query']);      
      $view->build_info['count_query'] = $query;      
    }
}

/**
 * Menu title callback returning correct number of new messages.
 */
function _privatemsg_views_ui_mailbox_title($title = NULL, $uid = NULL) {
  if (empty($uid)) {
    $uid = $GLOBALS['user']->uid;
  }  
  $count = _privatemsg_views_count_new_msg($uid);

  if ($count > 0) {
    return format_plural($count, 'Messages (1 new)', 'Messages (@count new)');
  }
  return t('Messages');
}

/**
 * Embeds provided view with overriden path. We need this until 
 * http://drupal.org/node/156130 is fixed.
 * Copied from views_embed_view().
 */
function _privatemsg_views_ui_embed_view($name, $display_id, $path = FALSE) {
  $args = func_get_args();
  array_shift($args); // remove $name
  array_shift($args); // remove $display_id
  if (count($args)) {
    array_shift($args); // remove $path
  }
  
  $view = views_get_view($name);
  
  if ($path) {
    $view->override_path = $path;
  }
  
  if (!$view || !$view->access($display_id)) {
    return;
  }

  return $view->preview($display_id, $args);
}

/**
 * Implementation of hook_theme().
 */
function privatemsg_views_ui_theme() {
  return array(
    'privatemsg_views_ui_thread' => array(
      'arguments' => array('thread' => NULL),
      'path' => drupal_get_path('module', 'privatemsg_views_ui') . '/theme',
      'template' => 'privatemsg-views-ui-thread',
      'file' => 'privatemsg_views_ui.preprocess.inc',
    ),
    'privatemsg_views_ui_mailbox' => array(
      'arguments' => array('uid' => NULL),
      'path' => drupal_get_path('module', 'privatemsg_views_ui') . '/theme',
      'template' => 'privatemsg-views-ui-mailbox',
      'file' => 'privatemsg_views_ui.preprocess.inc',
    ),
    'views_view_fields__privatemsg_thread' => array (
      'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'path' => drupal_get_path('module', 'privatemsg_views_ui') . '/theme',
      'template' => 'views-view-fields--privatemsg-thread',
      'file' => 'privatemsg_views_ui.preprocess.inc',
      'original hook' => 'views_view_fields',
    ),
  );
}

/**
 * Implementation of hook_views_api.
 */
function privatemsg_views_ui_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'privatemsg_views_ui'),
  );
}
